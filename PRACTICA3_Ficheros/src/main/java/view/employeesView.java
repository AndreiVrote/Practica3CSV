/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;


import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import model.employees;
import model.csvReader;
import model.orderEmployees;

/**
 *
 * @author Andrei
 */
public class employeesView extends javax.swing.JFrame {

    private ButtonGroup buttonGroup; // Instanciacion agrupacion de botones
    private ArrayList<employees> empleados; //se instancia una lista como ArrayList que se completara segun el csv cargado

    /**
     * Creates new form employeesView
     */
    public employeesView() {// inicializa componentes graficos
        initComponents();
        setFrame();//llamada al metodo setFrame con sus ajustes predeterminados
    }
    private void setFrame(){
        this.setTitle("Empleados - HR"); //titulo ventana
        this.setLocationRelativeTo(null);// ubicadcion ventana
        this.setResizable(false);// desactivacion del cambio de tamaño, se descuadra
        buttonGroup = new ButtonGroup(); //creacion de button group para que al seleccionar uno, otro se desactive
        //añadimos los radioButton al buttonGroup
        buttonGroup.add(this.ID_Ordenar);
        buttonGroup.add(this.Apellido_Ordenar);
        buttonGroup.add(this.Departamento_Ordenar);
        this.ID_Ordenar.setSelected(true);// de forma predeterminada es elegida

        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaEmpleados = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        ID_Ordenar = new javax.swing.JRadioButton();
        Apellido_Ordenar = new javax.swing.JRadioButton();
        Departamento_Ordenar = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        CargarDatos = new javax.swing.JButton();
        BusquedaId = new javax.swing.JButton();
        AñadirDatos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 370));
        getContentPane().setLayout(new java.awt.BorderLayout(0, 2));

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 1, 1));
        jPanel3.setMinimumSize(new java.awt.Dimension(600, 324));
        jPanel3.setPreferredSize(new java.awt.Dimension(600, 324));
        jPanel3.setLayout(new java.awt.BorderLayout(0, 2));

        jPanel1.setMinimumSize(new java.awt.Dimension(324, 78));
        jPanel1.setPreferredSize(new java.awt.Dimension(324, 78));
        jPanel1.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));

        listaEmpleados.setBorder(null);
        jScrollPane1.setViewportView(listaEmpleados);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Ordenar por", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        ID_Ordenar.setSelected(true);
        ID_Ordenar.setText("ID");
        ID_Ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_OrdenarActionPerformed(evt);
            }
        });
        jPanel6.add(ID_Ordenar);

        Apellido_Ordenar.setText("Apellido");
        Apellido_Ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Apellido_OrdenarActionPerformed(evt);
            }
        });
        jPanel6.add(Apellido_Ordenar);

        Departamento_Ordenar.setText("Departamento");
        Departamento_Ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Departamento_OrdenarActionPerformed(evt);
            }
        });
        jPanel6.add(Departamento_Ordenar);

        jPanel1.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(100, 10, 120, 10));
        jPanel2.setMinimumSize(new java.awt.Dimension(178, 299));
        jPanel2.setPreferredSize(new java.awt.Dimension(178, 299));
        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        CargarDatos.setText("Cargar datos");
        CargarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarDatosActionPerformed(evt);
            }
        });
        jPanel2.add(CargarDatos);

        BusquedaId.setText("Busqueda");
        BusquedaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BusquedaIdActionPerformed(evt);
            }
        });
        jPanel2.add(BusquedaId);

        AñadirDatos.setText("Añadir + datos");
        AñadirDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirDatosActionPerformed(evt);
            }
        });
        jPanel2.add(AñadirDatos);

        jPanel3.add(jPanel2, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ID_OrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_OrdenarActionPerformed
        OrdenAmostrar();//llamada metodo OrdenAmostrar
        //se ordena por id (explicacion en el metodo)
    }//GEN-LAST:event_ID_OrdenarActionPerformed

    private void CargarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarDatosActionPerformed
        JFileChooser fileChooser = new JFileChooser();//crea selecto de archivos 
        
        int fileResultado = fileChooser.showOpenDialog(this);//muestra la ventana, y posteriormente si se acepta, se guarda la selecion 
        // fileResultado como entero ya que JFileChooser devuelve un valor que representa su accion
        
        if (fileResultado == JFileChooser.APPROVE_OPTION) { //si se aprueba la eleccion
            String ubicacion = fileChooser.getSelectedFile().getAbsolutePath(); //obtiene la ubicacion del archivo
            empleados = csvReader.leerEmpleados(ubicacion);// llamada al metodo, lectura del archivo y escritura de la lista

            // crear y asigar el modelo para la JList (listaEmpleados) y se carga con los empleadoss
            listaEmpleados.setModel(crearModeloLista(empleados)); 
        }
    }//GEN-LAST:event_CargarDatosActionPerformed

    private void Apellido_OrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Apellido_OrdenarActionPerformed
        OrdenAmostrar();//llamada metodo OrdenAmostrar
        //se ordena por id (explicacion en el metodo)
    }//GEN-LAST:event_Apellido_OrdenarActionPerformed

    private void Departamento_OrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Departamento_OrdenarActionPerformed
        OrdenAmostrar();//llamada metodo OrdenAmostrar
        //se ordena por id (explicacion en el metodo)
    }//GEN-LAST:event_Departamento_OrdenarActionPerformed

    private void BusquedaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BusquedaIdActionPerformed
        Busqueda();//llamada metodo Busqueda, explicacione en el metodo
    }//GEN-LAST:event_BusquedaIdActionPerformed

    private void AñadirDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirDatosActionPerformed
        AnadirDatos();//llamada metodo AnadirDatos, explicacione en el metodo
    }//GEN-LAST:event_AñadirDatosActionPerformed
    
    /*
    Metodo que ordena la lista segun que opcion sea seleccionado
    */
    private void OrdenAmostrar(){
        if (AdvertenciaDatos()){//en caso de no haber cargado previamente los datos de uu csv, salta el error
            return;
        }
            
        //ordenamos segun el radio button seleccionado
        if(ID_Ordenar.isSelected()){//si ID_Ordenar es seleccionado
            orderEmployees.OrdenPorId(empleados);//llama al metodo OrdenPorId
            
        }else if(Apellido_Ordenar.isSelected()){//si Apellido_Ordenar es seleccionado
            orderEmployees.OrdenPorApellido(empleados);//llama al metodo OrdenPorApellido
            
        }else{//si es otra opcion, la que queda es Departamento_Ordenar
            orderEmployees.OrdenPorDepartamento(empleados);//llama al metodo OrdenPorDepartamento
        }

        // crear y asigar el modelo para la JList (listaEmpleados) y se carga con los empleados
        listaEmpleados.setModel(crearModeloLista(empleados));
    }
   
    /*
    metodo que busca un empleado por su id
    muestra una ventana para introducir el id a buscar
    si se encuentra ese empleado, se actualiza la lista mostrando ese empleado
    */
    private void Busqueda(){
        if (AdvertenciaDatos()){//en caso de no haber cargado previamente los datos de uu csv, salta el error
            return;
        }   
        
        //pregunta por el id a buscar
        String buscar = JOptionPane.showInputDialog(this, "Introduce un ID a buscar: ", "Buscador de ID", JOptionPane.QUESTION_MESSAGE);
        //JOptionPane devuelve String, por ello se recoge el id a buscar como String y luego se pasa a int
        
        if (buscar == null || buscar.isEmpty()){//validacion de si se cancela la accion o no se escribe nada
            JOptionPane.showMessageDialog(this, "Introduce un ID");
            return;
        }
        
           int idBuscar;
    try {
        // convertir el texto introducido a un numero int
        idBuscar = Integer.parseInt(buscar.trim());
    } catch (Exception ex) {
        // si no existe ese id salta el siguiente error
        JOptionPane.showMessageDialog(this, "ID no válido", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // lista para almacenar los empleados encontrados con el ID buscado
    ArrayList<employees> encontrados = new ArrayList<>();
    for (employees emp : empleados) {
        if (emp.getEmployee_id() == idBuscar) {
            encontrados.add(emp);
        }
    }

    // NOTA: id unicos pero recorre todo y en caso de haber vario id iguales saldrian 
    if (!encontrados.isEmpty()) {
        // crear el modelo de lista
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        for (employees encontrado : encontrados) {
            modeloLista.addElement(encontrado.toString());//llenar la lista con los empleados encontrados
        }
        // mostrar los resultados en la JList
        listaEmpleados.setModel(modeloLista);
    } else {
        // si no se encuentra ningún empleado, salta el siguiente mensaje de error
        JOptionPane.showMessageDialog(this, "Error. Empleado no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
    }

        
}
    
    /*
    metodo para añadir datos de empleados de otro csv. 
    se actualiza la lista en el orden que esta seleccionado, por ejemplo si esta puesta la ordenacion por id, 
    se pone en su lugar correspondiente.
    se actualiza la lista con los nuevos datos.
    */
    private void AnadirDatos(){
        if (AdvertenciaDatos()){//en caso de no haber cargado previamente los datos de otro csv, salta el error
            return;
        }
        
        //creacion de un selector de archivos como en el JButon CargarDatos, para elegir archivo csv
        JFileChooser archivoElegir = new JFileChooser();
        
        int resultado = archivoElegir.showOpenDialog(this); //ventana para abrir archivo
        //resultado como entero ya que JFileChooser devuelve un valor que representa su accion
        
        if (resultado == JFileChooser.APPROVE_OPTION){ //si se acepta (Abrir)
            String ubicacion = archivoElegir.getSelectedFile().getAbsolutePath(); //se obtiene la ubicacion del archivo
            ArrayList<employees> nuevos = csvReader.leerEmpleados(ubicacion);//lee los nuevos datos
            
            if(nuevos == null || nuevos.isEmpty()){//en caso de no haber datos, muetra el siguiente error
                JOptionPane.showMessageDialog(this, "No hay datos en el archivo seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            empleados.addAll(nuevos);//añade los nuevos datos a la lista empleados
            OrdenAmostrar();//acualiza y ordena la lista de nuevo
        }

    }
    
    //metodo que crea los modelos de lista, que necesitamos para la ordenacion de datos en el metodo ordenAmostrar
    // y en el boton CargarDatos
    private DefaultListModel<String> crearModeloLista (ArrayList<employees> listaEmpleados){
        DefaultListModel<String> modeloLista = new  DefaultListModel<>();//creacion del modelo de lista
        for (employees emp : empleados){//recorremos la lista de empleados
            modeloLista.addElement(emp.toString());//convierte cada empleado a String y se aña de al modelo
        }
        return modeloLista;//devuelve el modelo completo
    }
    
    //metodo que verifica si la lista esta vacia si es asi, salta la advertencia
    private boolean AdvertenciaDatos(){
        if (empleados == null || empleados.isEmpty()){
             JOptionPane.showMessageDialog(this, "Primero añade carga los datos", "Error", JOptionPane.ERROR_MESSAGE);
             return true;//devuelve true, la lista esta vacia o null
         }
        return false;//devuelve false, la lista no esta vacia o null
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Apellido_Ordenar;
    private javax.swing.JButton AñadirDatos;
    private javax.swing.JButton BusquedaId;
    private javax.swing.JButton CargarDatos;
    private javax.swing.JRadioButton Departamento_Ordenar;
    private javax.swing.JRadioButton ID_Ordenar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaEmpleados;
    // End of variables declaration//GEN-END:variables
}
